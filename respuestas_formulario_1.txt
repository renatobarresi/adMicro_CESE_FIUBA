##################-------Preguntas-------##################

Preguntas orientadoras

1. Describa brevemente los diferentes perfiles de familias de
microprocesadores/microcontroladores de ARM. Explique alguna de sus diferencias
características.

Cortex M

1. Describa brevemente las diferencias entre las familias de procesadores Cortex M0, M3 y
M4.

2. ¿Por qué se dice que el set de instrucciones Thumb permite mayor densidad de código?
Explique

3. ¿Qué entiende por arquitectura load-store? ¿Qué tipo de instrucciones no posee este
tipo de arquitectura?

4. ¿Cómo es el mapa de memoria de la familia?

5. ¿Qué ventajas presenta el uso de los “shadowed pointers” del PSP y el MSP?

6. Describa los diferentes modos de privilegio y operación del Cortex M, sus relaciones y
como se conmuta de uno al otro. Describa un ejemplo en el que se pasa del modo
privilegiado a no priviligiado y nuevamente a privilegiado.

7. ¿Qué se entiende por modelo de registros ortogonal? Dé un ejemplo

8. ¿Qué ventajas presenta el uso de intrucciones de ejecución condicional (IT)? Dé un
ejemplo

9. Describa brevemente las excepciones más prioritarias (reset, NMI, Hardfault).

10. Describa las funciones principales de la pila. ¿Cómo resuelve la arquitectura el llamado
a funciones y su retorno?

11. Describa la secuencia de reset del microprocesador.

12. ¿Qué entiende por “core peripherals”? ¿Qué diferencia existe entre estos y el resto de
los periféricos?

13. ¿Cómo se implementan las prioridades de las interrupciones? Dé un ejemplo

14. ¿Qué es el CMSIS? ¿Qué función cumple? ¿Quién lo provee? ¿Qué ventajas aporta?

15. Cuando ocurre una interrupción, asumiendo que está habilitada ¿Cómo opera el
microprocesador para atender a la subrutina correspondiente? Explique con un ejemplo

17. ¿Cómo cambia la operación de stacking al utilizar la unidad de punto flotante?

16. Explique las características avanzadas de atención a interrupciones: tail chaining y late
arrival.

17. ¿Qué es el systick? ¿Por qué puede afirmarse que su implementación favorece la
portabilidad de los sistemas operativos embebidos?

18. ¿Qué funciones cumple la unidad de protección de memoria (MPU)?

19. ¿Cuántas regiones pueden configurarse como máximo? ¿Qué ocurre en caso de haber
solapamientos de las regiones? ¿Qué ocurre con las zonas de memoria no cubiertas por las
regiones definidas?

20. ¿Para qué se suele utilizar la excepción PendSV? ¿Cómo se relaciona su uso con el resto
de las excepciones? Dé un ejemplo

21. ¿Para qué se suele utilizar la excepción SVC? Expliquelo dentro de un marco de un
sistema operativo embebido.

ISA

1. ¿Qué son los sufijos y para qué se los utiliza? Dé un ejemplo

2. ¿Para qué se utiliza el sufijo ‘s’? Dé un ejemplo

3. ¿Qué utilidad tiene la implementación de instrucciones de aritmética saturada? Dé un
ejemplo con operaciones con datos de 8 bits.

4. Describa brevemente la interfaz entre assembler y C ¿Cómo se reciben los argumentos
de las funciones? ¿Cómo se devuelve el resultado? ¿Qué registros deben guardarse en la
pila antes de ser modificados?

5. ¿Qué es una instrucción SIMD? ¿En qué se aplican y que ventajas reporta su uso? Dé un
ejemplo.

##################-------Respuestas-------##################

Preguntas orientadoras

1. La primera familia de procesadores que ARM introdujo al mercado fue el ARM6, que tenia como ventaja principal respecto a los demas procesadores de 32-bits la capacidad de soportar dos set de instrucciones. Tambien desarrollaron procesadores como el ARM9 y ARM11, utilizados en microcontroladores de alta performance y celulares. Luego del exito de estos procesadores, ARM diversifico a su portfolio presentando a la familia de procesadores Cortex, los cuales se dividen en los siguientes perfiles:
	*Cortex-A: utilizado en aplicaciones que requieran manejar aplicaciones complejas como sistemas operativos de proposito general.
	*Cortex-R: disenado para sistemas embebidos que requieran control duro en tiempo real.
	*Cortex-M: Disenado para microcontorladores que requieran bajo consumo energetico, bajo costo, eficiencia alta, latencia de interrupcion baja, etc.

Es importante mencionar que el perfil A esta basado en la arquitectura ARMv7-A, el perfil R esta basado en la arquitectura ARMv7-R, y el perfil M se divide en arquitectura ARMv7-M y ARMv6-M.

Cortex M

1. El perfil M tiene como principales procesadores al Cortex-M0, Cortex-M3 y Cortex-M4. El cortex-M0 esta enfocado a aplicaciones de bajo consumo energetico y baja complejidad, su arquitectura esta basada en la de ARMv6-M. El cortex-M3 es parecido al cortex-M4, debido a que los dos presentan a la mayoria de las instrucciones, tambien tienen el mismo modelo de manejo de interrupciones o NVIC. Sin embargo, el cortex-M4 es mejor para operaciones de procesamiento digital de senales. 

2. Debido a que las instrucciones Thumb son de 16 bits, y otorgan casi las mismas funcionalidades que las instrucciones ARM de 32 bits, es posible lograr las mismas tareas con un menor uso de memoria, con la desventaja de que la performance del procesador disminuye.

3. La arquitectura load-store es una caracteristica de un conjunto de instructiones, en donde las instrucciones son divididas en dos categorias: las de acceso a memoria y operaciones con la unidad aritmetica logica. En ARM, solo las instrucciones LDR y STR pueden acceder a memoria, y para poder realizar operaciones se debe de mover a los datos en memoria a los registros pertinentes del banco de registros del procesador.   
 
4. El mapa de memoria de los Cortex M3 y M4 tiene un espacio de direcciones de 4GB, que esta particionado en varias regiones como la de codigo, datos, perifericos y procesador. El uso del espacio de las regiones depende del fabricante y en general se utiliza solo una pequena parte de cada region, algunas regiones pueden no ser utilizadas.

5. La ventaja de tener dos stack pointers, MSP y PSP radica en que es posible separar contextos de ejecucion. Esta ventaja se puede apreciar de mejor manera en los sistemas operativos, ya que se puede separar al stack del kernel con el stack de las aplicaciones. De esta manera si es que ocurre un error severo que afecta el stack de las aplicaciones, el kernel no es afectado por esto. 

6. Los procesadores Cortex-M3 y Cortex-M4 tienen dos modos de operacion:

-Thread Mode: Es el modo el cual el procesador inicia, y se ejecutan las instrucciones de la aplicacion. El procesador puede estar estar en modo privilegiado o no privilegiado.

-Handler Mode: Cuando se esta ejecutando el manejo de una excepcion, en este modo el procesador siempre esta en modo privilegiado.

Los modos de privilegio definen el acceso de los modos de operacionj a los recursos del sistema.

En el modo thread, el programa puede utilizar el registro CONTROL para cambiar de estado privilegiado a no privilegiado, y luego, por medio del manejo de una interrupcion puede utilizar el mismo registro para pasar de modo no privilegiado a privilegiado.

7. El modelo de registros ortogonal indica que la mayoria de los registros pueden ser usados por las instrucciones, estos registros son de proposito general. 

En los Cortex-M3/M4 se tienen 13 registros de proposito general, r0 a r12, que instrucciones como LDR, STR, ADD, etc utilizan. Ejemplo ldr r1, [r0] mov r2, 6 cmp r1 r2

8. Posibilita utilizar menos ciclos del reloj para realizar ejecuciones condicionales, esto es debido a diferencia de instrucciones de branching como b o bx que vacian el pipeline, it mantiene  las instrucciones que esten en fetch y decode.
Ejemplo:

9. * El reseteo del procesador -que puede suceder de tres formas: power on reset, system reset y processor reset- hace que el PC sea cargado con la direccion de memoria de 0x00000000, luego el procesador lee los contenidos ubicados en esa direccion que es el MSP y en la direccion 0x00000004 esta el puntero al reset handler. El reset handler es una funcion que contiene distintas instrucciones para inicializar distintas funciones del microcontrolador y por ultimo realizar la llamada a main. 
   * NMI o Non maskable interrupt, es una ISR la cual no puede ser enmascarada/desactivada por PRIMASK o BASEPRI (flags que permiten desactivar las interrupciones)
   * Varias excepciones o ISR del procesador son utilizadas para indicar de que existio alguna falla en la ejecucion normal de instrucciones o acceso a memoria. Varias de estas ISR estan desactivadas por defecto y en cambio se utiliza al FaultHandler como funcion principal para denotar la existencia de errores. Al igual que las excepciones de resteo o NMI, el FaultHandler no se puede desactivar. 

10. La pila o stack es buffer de memoria de tipo LIFO, que permite almacenar datos en la memoria volatil. Los procesadores ARM utilizan las instrucciones PUSH para guardar los datos y POP para leer los datos en la memoria.
En los Cortex M3/M4 se utiliza el registro r13 para almacenar al stack pointer o SP, y la direccion inicial de este esta almacenada en el inicio de la tabla de vectores. Debido a que el modelo de stack utilizado es de tipo "Full descending", la direccion inicial del SP esta ubicado al final de la memoria RAM. Cuando se realiza el llamado a una funcion, se almacenan en el stack los valores del registro y para el retorno de la funcion se carga en el registro program counter el valor en el link register

11. La secuencia de reset del procesador puede ser iniciada por tres tipos de reset:
	1) Power on reset: Se resetea todo el microcontrolador
	2) System reset: Se resetea solo el procesador y perifericos, pero no los componentes para el debugging.
	3) Processor reset: Se restea solo al procesador.

Al efectuarse el reset, el PC es cargado con la direccion de memoria de 0x00000000 y el procesador lee los contenidos de las primeras dos palabras, el MSP y el puntero al Reset Handler. Luego el procesador carga al stack pointer con el valor obtenido del MSP y al PC con el puntero al reset handler.

12. Los "Core peripherals" son los perifericos de propios de los procesadores ARM, y su diferencia principal con los otros perifericos es que estos son definidos por los fabricantes de microcontroladores. Los core peripherals del cortex-M3 son el NVIC, SCB, SysTick timer y la MPU.

13. 

14. Common Microcontroller Software Interface Standard o CMSIS, desarrollado por ARM, es una capa de abstraccion compuesta de APIs, frameworks y flujos de trabajo desarrollado para microcontroladores que utilizen procesadores ARM. Los componentes del CMSIS permiten al programador tener una interfaz al procesador y perifericos lo que conlleva a varias ventajas como por ejemplo; simplificacion del codigo, rehutilizacion de software y reduccion de la curva de aprendizaje para los desarrolladores.

14.

15.

16.

17. El SysTick o "system timer" es un periferico propio de varias familias de procesadores Cortex. En general, es utilizado para la generacion de unidad de tiempo en los sistemas operativos, facilitando asi a la portabilidad de los sistemas operativos, debido a que la generacion del tiempo se puede hacer de la misma manera en otros procesadores que cuenten con el SysTick.
 
18. La MPU tiene como funciones principales la proteccion y definicion de atributos de regiones de memoria. En general se suele utilizar al MPU para hacer a los sistemas embebidos mas robustos, por ejemplo en un sistema operativo, puede evitar que una aplicacion escriba en memoria protegida que el kernel utiliza.  

19. 

20. La excepcion PendSV es una interrupcion para solicitar servicios del sistema. Debido a que su nivel de interrupcion es de baja prioridad, se utiliza para solicitar un cambio de contexto de ejecucion de forma segura.

21. El SVC (Supervisor Call) es una excepcion que es llamada luego de la ejecucion de la instruccion SVC. Esta instruccion es utilizada en los sistemas operativos para poder forzar a un cambio de contexto, en general para cambiar los privilegios de ejecucion. Asi el sistema operativo puede acceder a los recursos de hardware que considere necesario. 
ISA

1.

2.

3.

4.

5.